// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id       Int     @id @default(autoincrement())
  name     String?
  email    String  @unique
  password String?

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt()
  deletedAt  DateTime?
  Attendance Attendance[]
}

model Employee {
  id       Int     @id @default(autoincrement())
  name     String?
  email    String  @unique
  password String?

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt()
  deletedAt  DateTime?
  Attendance Attendance[]
}

model Service {
  id                   Int          @id @default(autoincrement())
  name                 String
  description          String
  estimatedTime        Int
  timeMeasure          TimeMeasures @default(MINUTE)
  value                Int
  commissionPercentage Int

  AttendanceServices AttendanceServices[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime?
}

model Attendance {
  id                        Int      @id @default(autoincrement())
  clientId                  Int
  employeeId                Int?
  startedIn                 DateTime
  endedIn                   DateTime
  totalValue                Int
  totalCommissionPercentage Int
  totalCommissionValue      Int

  Client             Client               @relation(fields: [clientId], references: [id])
  Employee           Employee?            @relation(fields: [employeeId], references: [id])
  AttendanceServices AttendanceServices[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime?
}

model AttendanceServices {
  id           Int @id @default(autoincrement())
  attendanceId Int
  serviceId    Int

  Atendance Attendance @relation(fields: [attendanceId], references: [id])
  Service   Service    @relation(fields: [serviceId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime?
}

enum TimeMeasures {
  DAY
  HOUR
  MINUTE
  SECONDS
}
